#!/usr/bin/env bash

# Create segmentation configuration file and detect CNVs based on the normalized data generated by BICseq2-norm
# Writes to directory $OUTDIR, file/sample name is defined by a $PREFIX derived from the .bin file names provided by the input archive file/directory $BIN

# Usage:
#   seg.sh -i INPUT -c CHRLIST -l LAMBDA -g CTRLGENOME -o OUTDIR

printHelpAndExit() {
    echo "Usage: ${0##*/} -i input -c chrlist -l lambda -g ctrlgenome -o outdir"
    echo "-i input : path to .bin files. It can be either a folder pointing to the files or a tar.gz archive. The name of bin files must have the following structure '{prefix}_{chromosome}.bin' with all the same 'prefix' name"
    echo "-c chrlist : newline-separated list of chromosomes, e.g., 'chr1'"
    echo "-l lambda : the (positive) penalty used for BICseq2 (default=3)"
    echo "-g ctrlgenome : optional path to bin files of the control genome. It can be either a folder pointing to the files or a tar.gz archive. The name of bin   files must have the following structure '{ctrlprefix}_{chromosome}.bin' with all the same 'ctrlprefix' name"
    echo "-o outdir : output directory name"
    exit "$1"
}

# Set defaults
lambda=2

while getopts ":i:c:l:g:o:" opt
do
    case "$opt" in
        i ) input="$OPTARG" ;;
        c ) chrlist="$OPTARG" ;;
        l ) lambda="$OPTARG" ;;
        g ) ctrlgenome="$OPTARG" ;;
        o ) outdir="$OPTARG" ;;
        ? ) helpFunction ;; # Print helpFunction in case parameter is non-existent
    esac
done

# Print helpFunction in case parameters are empty
if [ -z "$input" ] || [ -z "$chrlist" ] || [ -z "$outdir" ]
then
    echo "Some or all of the parameters are empty";
    printHelpAndExit
fi

mkdir -p $outdir
mkdir -p $outdir/tmp

if [[ $input == *tar.gz ]]
then
    tar -xzf $input -C $outdir/tmp
else
    cp $input/*.bin $outdir/tmp
fi

# derive the prefix to be used as file name from the .bin files, assuming that the name structure is '{prefix}_{chromosome}.bin'

flist=(`ls $outdir/tmp/*.bin`)
nompath=${flist[0]/%\.bin}
nomfile=`basename $nompath`
#nomfile=ll=`basename $nompath`
prefix=`echo $nomfile | rev | cut -d"_" -f2-  | rev`

SEG_CONFIG="$outdir/tmp/${prefix}.seg-config.txt" # configuration file

# manage control genome, create the configuration file and launch segmentation

if [ ! -z "$ctrlgenome" ]
then
    mkdir -p $outdir/tmp/ctrl
    if [[ $ctrlgenome == *tar.gz ]]
    then
        tar -xzf $ctrlgenome -C $outdir/tmp/ctrl
    else
        cp $ctrlgenome/* $outdir/tmp/ctrl
    fi
    flistctrl=(`ls mkdir -p $outdir/tmp/ctrl/*.bin`)
    nompathctrl=${flistctrl[0]/%\.bin}
    nomfilectrl=`basename $nompathctrl`
    prefixctrl=`echo $nomfilectrl | rev | cut -d"_" -f2-  | rev`
    printf "chromName\tbinFileNorm.Case\tbinFileNorm.Control\n" > $SEG_CONFIG
    while read CHR; do
        binCase=$outdir/tmp/${prefix}_${CHR}.bin
        binControl=$outdir/tmp/ctrl/${prefixctrl}_${CHR}.bin
        printf "$CHR\t$binCase\t$binControl\n" >> $SEG_CONFIG
    done<$chrlist
    BICseq2-seg.pl --lambda $lambda --bootstrap --control --tmp $outdir/tmp $SEG_CONFIG $outdir/${prefix}.BICseq.out || exit 1
else
    printf "chromName\tbinFileNorm\n" > $SEG_CONFIG
    while read CHR; do
        binFileNorm=$outdir/tmp/${prefix}_${CHR}.bin
        printf "$CHR\t$binFileNorm\n" >> $SEG_CONFIG
    done<$chrlist
    BICseq2-seg.pl --lambda $lambda --bootstrap --tmp $outdir/tmp $SEG_CONFIG $outdir/${prefix}.BICseq.out || exit 1
fi

rm -rf $outdir/tmp || exit 1

mv $outdir/${prefix}.BICseq.out ${outdir}_BICseq_results.txt || exit 1
